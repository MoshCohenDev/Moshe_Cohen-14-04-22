{"version":3,"sources":["store/actionStore.js","components/HomePage/DaysCards/DayCard/DayCard.jsx","components/HomePage/DaysCards/DaysCards.jsx","service/apiServices.js","service/getYourLocation.js","service/logic.js","service/setDefaultCity.js","components/HomePage/Search.jsx","components/HomePage/HomeWeatherCard/HomeWeatherCard.jsx","pages/HomePage.jsx","components/FavoritePage/FavoriteWeatherCard.jsx","pages/FavoritePage.jsx","components/NavBar/NavBar.jsx","App.js","store/state/index.js","store/reducers.js","store/index.js","index.js"],"names":["actionStore","type","payload","DayCard","data","useSelector","state","darkMode","Card","style","backgroundColor","maxWidth","padding","height","textAlign","borderRadius","color","marginLeft","CardHeader","className","title","dayWeeks","date","month","CardContent","min","max","src","day","Icon","DaysCards","daysForecast","map","API_KEY","URL","getAutoCompleteCities","query","a","fetch","res","json","message","getLocationByGeoPosition","latitude","longitude","getCurrentConditions","locationKey","getLocationForecastName","locaLeButtonFetch","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","cityCurrent","filterCityDaysAndTemperature","days","name","key","temp","DailyForecasts","arr","obj","item","Temperature","Maximum","Value","Minimum","Date","getDate","getMonth","toUTCString","substring","Day","night","Night","WeatherTextWeek","Headline","Text","push","getCurrentWeather","defaultCity","location","Key","AdministrativeArea","LocalizedName","setCityCurrent","currentConditions","currentWeather","isFavorite","Search","useState","options","setOptions","setError","dispatch","useDispatch","searchCity","e","target","value","number","result","city","label","setCityToCurrenWeather","currentCity","filterName","filter","Autocomplete","disablePortal","display","width","minWidth","onChange","textContent","renderInput","params","TextField","variant","HomeWeatherCard","isMetric","setIsMetric","checked","setChecked","favoriteWeathers","WeatherText","WeatherIcon","setToFavoriteList","favoriteWeather","sx","alignItems","justifyContent","subheader","IconButton","onClick","filteredItems","removeFromFavorite","fontSize","Metric","Imperial","CardActions","Switch","event","inputProps","HomePage","currentWeatherAndCondition","useEffect","Box","CircularProgress","FavoriteWeatherCard","IsFavorite","console","log","setCurrentWeather","size","FavoritePage","NavBar","to","Fab","ml","mt","defaultChecked","App","path","userInterface","combineReducers","action","store","createStore","reducers","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de8d49d3.chunk.js","sourcesContent":["export default function actionStore(type, payload) {\n  return { type, payload };\n}\n","import React from \"react\";\nimport {\n  styled,\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  IconButton,\n} from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\n\nfunction DayCard({ data }) {\n  const { state } = useSelector((state) => state);\n  const { darkMode } = state;\n  return (\n    <Card\n      style={\n        darkMode\n          ? {\n              backgroundColor: \"white\",\n              maxWidth: 400,\n              padding: 2,\n              height: \"100%\",\n              textAlign: \"left\",\n              borderRadius: 20,\n            }\n          : {\n              backgroundColor: \"rgba(0, 0, 0, 0.746)\",\n              maxWidth: 400,\n              padding: 2,\n              color: \"white\",\n              height: \"100%\",\n              textAlign: \"left\",\n              marginLeft: \"5px\",\n              borderRadius: 20,\n            }\n      }\n    >\n      <CardHeader className=\"font-bold text-base\" title={data.dayWeeks} />\n      <CardHeader className=\"font-bold text-base\" title={data.date}>\n        {data.month}\n      </CardHeader>\n\n      <CardContent className=\"font-bold text-xl text-center\">\n        min :{data.min} C\n      </CardContent>\n      <CardContent className=\"font-bold text-xl text-center\">\n        max :{data.max} C\n      </CardContent>\n      <div className=\"flex justify-center\">\n        <img\n          className=\"animate-pulse\"\n          src={`https://developer.accuweather.com/sites/default/files/${data.day.Icon}-s.png`}\n        ></img>\n      </div>\n    </Card>\n  );\n}\n\nexport default DayCard;\n","import { React, useEffect } from \"react\";\nimport DayCard from \"./DayCard/DayCard\";\nimport { useSelector } from \"react-redux\";\n\nfunction DaysCards() {\n  const { state } = useSelector((state) => state);\n  return (\n    <div className=\"flex mt-10 mb-40 justify-evenly\">\n      {state.daysForecast &&\n        state.daysForecast.map((DaysCards) => {\n          return (\n            <div key={DaysCards.date}>\n              <DayCard data={DaysCards} />\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nexport default DaysCards;\n","import { de } from \"date-fns/locale\";\n\nconst API_KEY = \"K7FyZGsQZ3hGAaPllaoQfUH8HAc7BmSb\";\nconst URL = \"https://dataservice.accuweather.com/\";\n\nexport async function getAutoCompleteCities(query) {\n  try {\n    const res = await fetch(\n      `${URL}locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${query}`\n    );\n    return res.json();\n  } catch (e) {\n    return e.message;\n  }\n}\nexport async function getLocationByGeoPosition({ latitude, longitude }) {\n  try {\n    const res = await fetch(\n      `${URL}locations/v1/cities/geoposition/search?apikey=${API_KEY}&q=${latitude}%2C${longitude}`\n    );\n    return res.json();\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function getCurrentConditions(locationKey) {\n  try {\n    const res = await fetch(\n      `${URL}currentconditions/v1/${locationKey}?apikey=${API_KEY}`\n    );\n    return res.json();\n  } catch (e) {\n    return e.message;\n  }\n}\n\nexport async function getLocationForecastName(locationKey) {\n  try {\n    const res = await fetch(\n      `${URL}forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}&metric=true`\n    );\n    return res.json();\n  } catch (e) {\n    return e.message;\n  }\n}\n","import { getLocationByGeoPosition } from \"./apiServices\";\n\nfunction getLongAndLat() {\n  return new Promise((resolve, reject) =>\n    navigator.geolocation.getCurrentPosition(resolve, reject)\n  );\n}\nexport const locaLeButtonFetch = async () => {\n  try {\n    let position = await getLongAndLat(),\n      { latitude, longitude } = position.coords;\n    const cityCurrent = await getLocationByGeoPosition({\n      latitude: latitude,\n      longitude: longitude,\n    });\n    return cityCurrent;\n  } catch (e) {\n    return null;\n  }\n};\n","export async function filterCityDaysAndTemperature({ days, name, key }) {\n  let temp = days.DailyForecasts;\n  let arr = [];\n  let obj = {};\n  for (let item of temp) {\n    obj.name = name;\n    obj.key = key;\n    obj.max = item.Temperature.Maximum.Value;\n    obj.min = item.Temperature.Minimum.Value;\n    obj.date = new Date(item.Date).getDate();\n    obj.month = new Date(item.Date).getMonth() + 1;\n    obj.dayWeeks = new Date(item.Date).toUTCString().substring(0, 3);\n    obj.day = item.Day;\n    obj.night = item.Night;\n    obj.WeatherTextWeek = days.Headline.Text;\n    arr.push(obj);\n    obj = {};\n  }\n  return arr;\n}\n","import { locaLeButtonFetch } from './getYourLocation';\nimport { filterCityDaysAndTemperature } from './logic';\nimport { getCurrentConditions, getLocationForecastName } from './apiServices';\n// import { getCurrentConditions, getLocationForecastName } from \"./apiLocal\";\n\nexport async function getCurrentWeather(defaultCity) {\n\tlet Key;\n\tlet name;\n\tlet location = await locaLeButtonFetch();\n\tif (location) {\n\t\tKey = location.Key;\n\t\tname = location.AdministrativeArea.LocalizedName;\n\t} else {\n\t\tKey = defaultCity.Key;\n\t\tname = defaultCity.name;\n\t}\n\tconst res = await setCityCurrent(Key, name);\n\treturn res;\n}\n\nconst setCityCurrent = async (Key, name) => {\n\tconst days = await getLocationForecastName(Key);\n\n\tconst currentConditions = getCurrentConditions(Key);\n\tlet currentWeather = {\n\t\tKey,\n\t\tname,\n\t\tisFavorite: false,\n\t\tcurrentConditions: currentConditions[0],\n\t};\n\tconst daysForecast = await filterCityDaysAndTemperature({\n\t\tdays,\n\t\tname: name,\n\t\tkey: Key,\n\t});\n\treturn { daysForecast, currentWeather };\n};\n","import { React, useState } from \"react\";\nimport { TextField, Autocomplete } from \"@mui/material\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getAutoCompleteCities } from \"../../service/apiServices\";\nimport actionStore from \"../../store/actionStore\";\nimport { getCurrentWeather } from \"../../service/setDefaultCity\";\n\nconst Search = () => {\n  const [options, setOptions] = useState([]);\n  const [error, setError] = useState(false);\n  const dispatch = useDispatch();\n  const { state } = useSelector((state) => state);\n  const { darkMode } = state;\n\n  const searchCity = async (e) => {\n    if (e.target.value == \"\" || e.target.value === typeof number) {\n      setError(true);\n      setOptions([]);\n    } else {\n      setError(false);\n      const result = getAutoCompleteCities(e.target.value);\n      const data = result.data.map((city) => {\n        return {\n          label: city.LocalizedName,\n          key: city.Key,\n        };\n      });\n      setOptions([...data]);\n    }\n  };\n  const setCityToCurrenWeather = async (currentCity) => {\n    if (currentCity === \"\") {\n      return;\n    }\n    const filterName = options.filter((city) => city.label == currentCity);\n    let Key = filterName[0].key;\n    let name = filterName[0].label;\n    const { daysForecast, currentWeather } = await getCurrentWeather({\n      name,\n      Key,\n    });\n    dispatch(actionStore(\"SET_CURRENT_CITY_AND_CONDITION\", currentWeather));\n    dispatch(actionStore(\"SET_IS_FAVORITE\", false));\n    dispatch(actionStore(\"SET_DAYS_FORECAST\", daysForecast));\n    return daysForecast;\n  };\n  return (\n    <div className=\" text-center mt-10 flex-col\">\n      <Autocomplete\n        disablePortal\n        style={\n          darkMode\n            ? {\n                backgroundColor: \"white\",\n                display: \"inline-block\",\n                width: 500,\n              }\n            : {\n                backgroundColor: \"rgba(0, 0, 0, 0.746)\",\n                minWidth: 550,\n                display: \"inline-block\",\n              }\n        }\n        options={options}\n        onChange={(e) => {\n          setCityToCurrenWeather(e.target.textContent);\n        }}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            onChange={(e) => searchCity(e)}\n            variant=\"outlined\"\n            label={\"Search city english  only\"}\n          />\n        )}\n      />\n    </div>\n  );\n};\nexport default Search;\n","import { React, useState } from \"react\";\nimport actionStore from \"../../../store/actionStore\";\nimport Switch from \"@mui/material/Switch\";\n// import \"./HomeWeatherCard.scss\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  IconButton,\n} from \"@mui/material\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\n\nexport default function HomeWeatherCard({ data }) {\n  const [isMetric, setIsMetric] = useState(false);\n  const [checked, setChecked] = useState(true);\n  const dispatch = useDispatch();\n  const { state } = useSelector((state) => state);\n  const { favoriteWeathers, isFavorite, darkMode } = state;\n  const { currentConditions, name } = data;\n  const { Temperature, WeatherText, WeatherIcon } = currentConditions;\n\n  const removeFromFavorite = (data) => {\n    const filteredItems = favoriteWeathers.filter(\n      (item) => item.Key !== data.Key\n    );\n\n    dispatch(actionStore(\"REMOVE_FAVORITE_WEATHER\", filteredItems));\n    dispatch(actionStore(\"SET_IS_FAVORITE\", false));\n  };\n  const setToFavoriteList = async (favoriteWeather) => {\n    favoriteWeather.isFavorite = true;\n    dispatch(actionStore(\"SET_IS_FAVORITE\", true));\n    dispatch(\n      actionStore(\"ADD_TO_FAVORITE_WEATHER\", {\n        ...favoriteWeather,\n      })\n    );\n  };\n\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n    setIsMetric(!isMetric);\n  };\n\n  return (\n    // <div className={!currentConditions.IsDayTime ? \"day  \" : \"night \"}>\n    <Card\n      sx={{\n        width: \"100%\",\n        padding: 4,\n        textAlign: \"left\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        borderRadius: 10,\n      }}\n      style={\n        darkMode\n          ? {}\n          : {\n              backgroundColor: \"rgba(0, 0, 0, 0.746)\",\n              color: \"white\",\n            }\n      }\n    >\n      <div className=\"flex justify-between\">\n        <CardHeader\n          className=\"font-bold text-base\"\n          title={name}\n          subheader={WeatherText}\n        />\n        <div className=\"mt-2\">\n          {isFavorite ? (\n            <IconButton\n              onClick={() => removeFromFavorite(data)}\n              aria-label=\"add to favorites\"\n            >\n              <FavoriteIcon sx={{ color: \"red\", fontSize: \"2rem\" }} />\n            </IconButton>\n          ) : (\n            <IconButton\n              onClick={() => setToFavoriteList(data)}\n              aria-label=\"add to favorites\"\n            >\n              <FavoriteIcon sx={{ fontSize: \"2rem\", color: \"white\" }} />\n            </IconButton>\n          )}\n        </div>\n      </div>\n      <CardContent className=\"font-bold text-3xl text-center\">\n        {isMetric === true\n          ? Temperature.Metric.Value\n          : Temperature.Imperial.Value}\n        ° C\n      </CardContent>\n      <div className=\"flex justify-center\">\n        <img\n          className=\"animate-pulse\"\n          src={`https://developer.accuweather.com/sites/default/files/${WeatherIcon}-s.png`}\n        ></img>\n      </div>\n      <CardActions sx={{ display: \"flex\", justifyContent: \"center\" }}>\n        <Switch\n          checked={checked}\n          onChange={handleChange}\n          color=\"default\"\n          inputProps={{ \"aria-label\": \"controlled\" }}\n        />\n      </CardActions>\n    </Card>\n    // </div>\n  );\n}\n","import { React, useEffect } from \"react\";\nimport actionStore from \"../store/actionStore\";\nimport DaysCards from \"../components/HomePage/DaysCards/DaysCards\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Search from \"../components/HomePage/Search\";\nimport { getCurrentWeather } from \"../service/setDefaultCity\";\nimport HomeWeatherCard from \"../components/HomePage/HomeWeatherCard/HomeWeatherCard\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nconst defaultCity = {\n  name: \"Tel Aviv\",\n  Key: \"215854\",\n};\n\nconst HomePage = () => {\n  const dispatch = useDispatch();\n  const { state } = useSelector((state) => state);\n  const { currentWeatherAndCondition, daysForecast, darkMode } = state;\n\n  useEffect(async () => {\n    if (currentWeatherAndCondition) {\n      return { currentWeatherAndCondition, daysForecast };\n    } else {\n      const { daysForecast, currentWeather } = await getCurrentWeather(\n        defaultCity\n      );\n      dispatch(actionStore(\"SET_CURRENT_CITY_AND_CONDITION\", currentWeather));\n      dispatch(actionStore(\"SET_DAYS_FORECAST\", daysForecast));\n    }\n  }, []);\n\n  return (\n    <div className={darkMode ? \"dark w-full\" : \"light w-full\"}>\n      <header className=\"text-center sm:text-6xl text-3xl\">Weather app</header>\n      <Search />\n      <div className=\"grid justify-center mt-10 \">\n        {currentWeatherAndCondition && (\n          <HomeWeatherCard data={currentWeatherAndCondition} />\n        )}\n        {daysForecast ? (\n          <DaysCards />\n        ) : (\n          <Box sx={{ display: \"flex\", justifyContent: \"center\" }}>\n            <CircularProgress />\n          </Box>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default HomePage;\n","import { React, useState } from \"react\";\nimport actionStore from \"../../store/actionStore\";\nimport Switch from \"@mui/material/Switch\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  CardActions,\n  IconButton,\n} from \"@mui/material\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport { getLocationForecastName } from \"../../service/apiServices\";\nimport { filterCityDaysAndTemperature } from \"../../service/logic.js\";\n\nexport default function FavoriteWeatherCard({ data }) {\n  const [isMetric, setIsMetric] = useState(false);\n  const [checked, setChecked] = useState(true);\n  const dispatch = useDispatch();\n  const { state } = useSelector((state) => state);\n  const { favoriteWeathers, IsFavorite, darkMode } = state;\n  const { currentConditions, name } = data;\n  const { Temperature, WeatherText, WeatherIcon } = currentConditions;\n\n  const removeFromFavorite = (data) => {\n    console.log(data);\n    const filteredItems = favoriteWeathers.filter(\n      (item) => item.Key !== data.Key\n    );\n    dispatch(actionStore(\"REMOVE_FAVORITE_WEATHER\", filteredItems));\n  };\n  const setCurrentWeather = async (data) => {\n    const days = await getLocationForecastName(data.Key);\n    const daysForecast = await filterCityDaysAndTemperature({\n      days,\n      name: data.name,\n      key: data.Key,\n    });\n\n    dispatch(actionStore(\"SET_CURRENT_CITY_AND_CONDITION\", data));\n    dispatch(actionStore(\"SET_DAYS_FORECAST\", daysForecast));\n  };\n\n  const handleChange = (event) => {\n    setChecked(event.target.checked);\n    setIsMetric(!isMetric);\n  };\n\n  return (\n    <Card\n      sx={{\n        width: \"100%\",\n        padding: 4,\n        textAlign: \"left\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        borderRadius: 10,\n      }}\n      style={\n        darkMode\n          ? {}\n          : {\n              backgroundColor: \"rgba(0, 0, 0, 0.746)\",\n              color: \"white\",\n            }\n      }\n    >\n      <CardHeader\n        className=\"font-bold text-base\"\n        title={name}\n        subheader={WeatherText}\n      />\n      <div className=\"mt-2\">\n        {IsFavorite ? (\n          <IconButton\n            onClick={() => removeFromFavorite(data)}\n            aria-label=\"add to favorites\"\n          >\n            <FavoriteIcon sx={{ color: \"red\" }} />\n          </IconButton>\n        ) : (\n          <IconButton\n            onClick={() => setCurrentWeather(data)}\n            aria-label=\"add to favorites\"\n          >\n            <FavoriteIcon />\n          </IconButton>\n        )}\n      </div>\n      <CardContent className=\"font-bold text-xl text-center\">\n        {isMetric === true\n          ? Temperature.Metric.Value\n          : Temperature.Imperial.Value}\n        ° C\n      </CardContent>\n      <div className=\"flex justify-center\">\n        <img\n          className=\"animate-pulse\"\n          src={`https://developer.accuweather.com/sites/default/files/${WeatherIcon}-s.png`}\n        ></img>\n      </div>\n      <CardActions sx={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <IconButton\n          onClick={() => removeFromFavorite(data)}\n          aria-label=\"delete\"\n          size=\"large\"\n          color=\"primary\"\n          sx={{\n            \"& > p\": {\n              fontSize: [2, 3, 4],\n            },\n            \"&:hover\": {\n              backgroundColor: \"white\",\n            },\n          }}\n        >\n          <DeleteIcon fontSize=\"inherit\" />\n        </IconButton>\n\n        <Switch\n          checked={checked}\n          onChange={handleChange}\n          color=\"default\"\n          inputProps={{ \"aria-label\": \"controlled\" }}\n        />\n      </CardActions>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport FavoriteWeatherCard from \"../components/FavoritePage/FavoriteWeatherCard\";\nfunction FavoritePage() {\n  const { state } = useSelector((state) => state);\n  const { darkMode } = state;\n  return (\n    <div className={darkMode ? \"dark\" : \"light\"}>\n      <div className=\"flex-col justify-center mt-20 text-center\">\n        <p className=\"text-5xl mb-10\">My Favorite Weather</p>\n        <div className=\"flex justify-center  text-center\">\n          {state.favoriteWeathers &&\n            state.favoriteWeathers.map((favoriteWeather) => {\n              return (\n                <div key={favoriteWeather}>\n                  {/* <CurrentWeatherNew data={favoriteWeather} type={\"favorite\"} /> */}\n                  <FavoriteWeatherCard data={favoriteWeather} />\n                </div>\n              );\n            })}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default FavoritePage;\n","import { Link } from \"react-router-dom\";\nimport Fab from \"@mui/material/Fab\";\nimport HomeIcon from \"@mui/icons-material/Home\";\nimport FavoriteIcon from \"@mui/icons-material/Favorite\";\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\nimport Switch from \"@material-ui/core/Switch\";\nimport actionStore from \"../../store/actionStore\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nconst NavBar = () => {\n  const dispatch = useDispatch();\n\n  const { state } = useSelector((state) => state);\n  const { darkMode } = state;\n\n  return (\n    <div className={darkMode ? \"navBarDark\" : \"navBar\"}>\n      <div className=\"flex justify-between\">\n        <div className=\"flex ml-4\">\n          <Link to=\"/\">\n            <Fab variant=\"extended\" size=\"medium\">\n              <HomeIcon sx={{}} />\n              home page\n            </Fab>{\" \"}\n          </Link>\n          <Link to=\"/favorite\">\n            <Fab variant=\"extended\" size=\"medium\">\n              <FavoriteIcon sx={{}} />\n              favorite page\n            </Fab>{\" \"}\n          </Link>\n        </div>\n        <Fab variant=\"extended\" sx={{ ml: 2, mt: 1 }} size=\"medium\">\n          <Switch\n            defaultChecked\n            color=\"default\"\n            inputProps={{ \"aria-label\": \"checkbox with default color\" }}\n            onChange={(e) => dispatch(actionStore(\"SET_IS_DARK\", !darkMode))}\n          />\n          dark mode\n        </Fab>\n      </div>\n    </div>\n  );\n};\nexport default NavBar;\n","import { React } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomePage from \"../src/pages/HomePage.jsx\";\nimport FavoritePage from \"../src/pages/FavoritePage\";\nimport NavBar from \"../src/components/NavBar/NavBar\";\nimport \"./App.scss\";\nfunction App() {\n  const { state } = useSelector((state) => state);\n  const { darkMode } = state;\n  return (\n    <div className=\"app\">\n      <Router>\n        <NavBar />\n        <Switch>\n          <Route path=\"/favorite\">\n            <FavoritePage />\n          </Route>\n          <Route path=\"/\">\n            <HomePage className={darkMode ? \"dark\" : \"light\"} />\n          </Route>\n        </Switch>\n      </Router>{\" \"}\n    </div>\n  );\n}\n\nexport default App;\n","const userInterface = {\n  currentWeatherAndCondition: null,\n  favoriteWeathers: [],\n  daysForecast: null,\n  isFavorite: false,\n  darkMode: false,\n};\n\nexport default function state(state = userInterface, action) {\n  const { payload, type } = action;\n  switch (type) {\n    case \"SET_CURRENT_CITY_AND_CONDITION\":\n      return { ...state, currentWeatherAndCondition: action.payload };\n    case \"ADD_TO_FAVORITE_WEATHER\":\n      return {\n        ...state,\n        favoriteWeathers: [...state.favoriteWeathers, payload],\n      };\n    case \"SET_IS_FAVORITE\":\n      return {\n        ...state,\n        isFavorite: payload,\n      };\n    case \"SET_IS_DARK\":\n      return {\n        ...state,\n        darkMode: payload,\n      };\n    case \"SET_IS_METRIC\":\n      return {\n        ...state,\n        isMetric: payload,\n      };\n    case \"REMOVE_FAVORITE_WEATHER\":\n      return {\n        ...state,\n        favoriteWeathers: action.payload,\n      };\n    case \"SET_DAYS_FORECAST\":\n      return { ...state, daysForecast: action.payload };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport state from \"./state\";\n\nexport default combineReducers({\n  state,\n});\n","import { createStore } from \"redux\";\nimport reducers from \"./reducers\";\n\nexport const store = createStore(reducers);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store\";\nimport \"./index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}